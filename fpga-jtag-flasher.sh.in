#!/bin/sh

# fpga-jtag-flasher.sh - FPGA JTAG Flash Programming Wrapper
# Wrapper script for xc3sprog with enhanced functionality for FPGA programming
# Generated by CMake from fpga-jtag-flasher.sh.in

set -e  # Exit on any error

# Configuration (set by CMake)
XC3SPROG_BIN="@CMAKE_INSTALL_PREFIX@/bin/xc3sprog"
BSCAN_PATH="@CMAKE_INSTALL_PREFIX@/share/xc3sprog/bscan_spi"

# Fallback to system paths if installed files not found
if [ ! -x "$XC3SPROG_BIN" ]; then
    XC3SPROG_BIN="/usr/bin/xc3sprog"
fi

if [ ! -d "$BSCAN_PATH" ]; then
    BSCAN_PATH="/usr/share/xc3sprog/bscan_spi"
fi

DEFAULT_CABLE="gpiod_creator"
DEFAULT_POSITION=0
VERBOSE=0

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

# Show usage information
show_usage() {
    cat << EOF
Usage: $(basename "$0") [OPTIONS] COMMAND

FPGA JTAG Flash Programming Wrapper for xc3sprog

Installation paths:
  xc3sprog: $XC3SPROG_BIN
  bscan files: $BSCAN_PATH

COMMANDS:
    --info                      Show FPGA and SPI flash information
    --flash=FILE               Flash bitstream file to SPI flash
    --help                     Show this help message

OPTIONS:
    --cable=CABLE              JTAG cable type (default: $DEFAULT_CABLE)
    --position=POS             JTAG chain position (default: $DEFAULT_POSITION)
    --bscan=FILE               Custom bscan bitstream file
    --skipbitstream            Skip bitstream loading (use with --flash or --info)
    --verbose                  Enable verbose output
    --dry-run                  Show commands without executing

EXAMPLES:
    $(basename "$0") --info
    $(basename "$0") --info --skipbitstream
    $(basename "$0") --flash=/path/to/fpga.bin
    $(basename "$0") --flash=/path/to/fpga.bin --skipbitstream
    $(basename "$0") --cable=ft2232 --position=1 --info
    $(basename "$0") --flash=/path/to/fpga.bin --verbose --dry-run

SUPPORTED FPGA DEVICES:
    Auto-detected based on JTAG ID. Common bscan files available:
    - XC7S50T (xc7s50csga324-1.bit)
    - XC6SLX series (xc6slx16_cs324.bit, xc6slx45-fg484.bit, etc.)
    - XC3S series (xc3s250e_godil.bit, xc3s400an.bit, etc.)

EOF
}

# Parse FPGA device from IDCODE
get_fpga_device() {
    local idcode="$1"
    case "$idcode" in
        "0x0362f093") echo "XC7S50T" ;;
        "0x04250093") echo "XC6SLX16" ;;
        "0x04286093") echo "XC6SLX45" ;;
        "0x0428c093") echo "XC6SLX75T" ;;
        "0x01414093") echo "XC3S250E" ;;
        "0x0141c093") echo "XC3S400AN" ;;
        "0x01428093") echo "XC3S500E" ;;
        *) echo "UNKNOWN($idcode)" ;;
    esac
}

# Find appropriate bscan file for device
find_bscan_file() {
    local device="$1"
    local bscan_file=""
    
    case "$device" in
        "XC7S50T")     bscan_file="$BSCAN_PATH/xc7s50csga324-1.bit" ;;
        "XC6SLX16")    bscan_file="$BSCAN_PATH/xc6slx16_cs324.bit" ;;
        "XC6SLX45")    bscan_file="$BSCAN_PATH/xc6slx45-fg484.bit" ;;
        "XC6SLX75T")   bscan_file="$BSCAN_PATH/xc6slx75-t-fg484.bit" ;;
        "XC3S250E")    bscan_file="$BSCAN_PATH/xc3s250e_godil.bit" ;;
        "XC3S400AN")   bscan_file="$BSCAN_PATH/xc3s400an.bit" ;;
        "XC3S500E")    bscan_file="$BSCAN_PATH/xc3s500e_godil.bit" ;;
        *)
            log_warning "No specific bscan file found for device $device"
            # Try to find a generic one
            bscan_file=$(find "$BSCAN_PATH" -name "*.bit" | head -1)
            ;;
    esac
    
    if [ -f "$bscan_file" ]; then
        echo "$bscan_file"
    else
        log_error "Bscan file not found: $bscan_file"
        return 1
    fi
}

# Parse SPI flash device from JEDEC ID
get_flash_device() {
    local jedec="$1"
    # Normalize the JEDEC string (handle different spacing formats)
    local normalized=$(echo "$jedec" | sed 's/0x/ 0x/g' | tr -s ' ')
    
    case "$normalized" in
        *"9d60 0x18"*|*"9d 60 0x18"*) echo "IS25LP128" ;;
        *"ef40 0x18"*|*"ef 40 0x18"*) echo "W25Q128" ;;
        *"2020 0x18"*|*"20 20 0x18"*) echo "M25P128" ;;
        *"c220 0x18"*|*"c2 20 0x18"*) echo "MX25L128" ;;
        *) echo "UNKNOWN($jedec)" ;;
    esac
}

# Get FPGA and flash information
get_info() {
    local cable="$1"
    local position="$2"
    local bscan_file="$3"
    local skip_bitstream="$4"
    
    log_info "Please Wait...reading jtag chain info"
    
    # Check if xc3sprog exists and is executable
    if [ ! -x "$XC3SPROG_BIN" ]; then
        log_error "xc3sprog not found at $XC3SPROG_BIN"
        return 1
    fi
    
    # First, try to detect FPGA device without bscan
    local cmd_detect="$XC3SPROG_BIN -c $cable -p $position"
    local output_detect
    
    if [ $VERBOSE -eq 1 ]; then
        log_info "Running device detection: $cmd_detect"
    fi
    
    if ! output_detect=$(sudo $cmd_detect 2>&1); then
        if [ $VERBOSE -eq 1 ]; then
            log_error "Command failed: $cmd_detect"
            log_error "Output: $output_detect"
        fi
        log_error "Failed to communicate with FPGA during device detection"
        echo "Failed!!"
        return 1
    fi
    
    if [ $VERBOSE -eq 1 ]; then
        log_info "Device detection output:"
        echo "$output_detect"
    fi
    
    # Extract IDCODE from detection
    local idcode
    idcode=$(echo "$output_detect" | grep -o "IDCODE: 0x[0-9a-fA-F]*" | cut -d: -f2 | tr -d ' ')
    
    if [ -z "$idcode" ]; then
        log_error "Could not detect FPGA device"
        if [ $VERBOSE -eq 1 ]; then
            log_error "IDCODE extraction failed from output:"
            echo "$output_detect"
        else
            log_info "Run with --verbose for more details"
        fi
        echo "Failed!!"
        return 1
    fi
    
    # Get device name
    local device
    device=$(get_fpga_device "$idcode")
    
    # CRITICAL: Check if we should skip bscan (flash detection)
    if [ "$skip_bitstream" = "1" ]; then
        log_info "Skipping bscan bitstream and flash detection (--skipbitstream specified)"
        log_success "IDCODE=$idcode : DEVICE=$device : FLASH=SKIPPED"
        return 0
    fi
    
    # Now try with bscan for flash detection
    local cmd_flash="$XC3SPROG_BIN -c $cable -p $position"
    
    # Auto-select bscan file if not provided
    if [ -z "$bscan_file" ]; then
        log_info "Trying to auto-detect bscan file for $device..."
        if ! bscan_file=$(find_bscan_file "$device"); then
            log_warning "No bscan file found for $device, skipping flash detection"
            log_success "IDCODE=$idcode : DEVICE=$device : FLASH=NOT_DETECTED"
            return 0
        fi
        log_info "Using bscan file: $bscan_file"
    fi
    
    if [ -n "$bscan_file" ]; then
        if [ ! -f "$bscan_file" ]; then
            log_error "Bscan file not found: $bscan_file"
            return 1
        fi
        cmd_flash="$cmd_flash -I$bscan_file"
    fi
    
    if [ $VERBOSE -eq 1 ]; then
        cmd_flash="$cmd_flash -v"
        log_info "Running flash detection: $cmd_flash"
    fi
    
    # Execute flash detection command
    local output_flash
    if ! output_flash=$(sudo $cmd_flash 2>&1); then
        log_warning "Flash detection failed, but FPGA was detected"
        log_success "IDCODE=$idcode : DEVICE=$device : FLASH=DETECTION_FAILED"
        return 0
    fi
    
    # Extract JEDEC ID if available
    local flash_jedec flash_device
    flash_jedec=$(echo "$output_flash" | grep "JEDEC:" | cut -d: -f2 | tr -d ' ')
    
    if [ -n "$flash_jedec" ]; then
        # Clean up the JEDEC string - remove extra spaces and normalize
        flash_jedec=$(echo "$flash_jedec" | sed 's/0x/ 0x/g' | tr -s ' ' | sed 's/^ *//; s/ *$//')
        flash_device=$(get_flash_device "$flash_jedec")
        log_success "IDCODE=$idcode : DEVICE=$device : FLASH=$flash_device : SPI-FLASH-JEDEC=$flash_jedec"
    else
        log_warning "SPI flash not detected with bscan bitstream"
        log_success "IDCODE=$idcode : DEVICE=$device : FLASH=NOT_DETECTED"
    fi
}

# Flash bitstream to SPI flash
flash_bitstream() {
    local cable="$1"
    local position="$2"
    local flash_file="$3"
    local skip_bitstream="$4"
    local dry_run="$5"
    
    # Validate flash file exists
    if [ ! -f "$flash_file" ]; then
        log_error "Flash file not found: $flash_file"
        return 1
    fi
    
    # Check if xc3sprog exists and is executable
    if [ ! -x "$XC3SPROG_BIN" ]; then
        log_error "xc3sprog not found at $XC3SPROG_BIN"
        return 1
    fi
    
    log_info "Starting flash programming..."
    log_info "Flash file: $flash_file"
    log_info "File size: $(du -h "$flash_file" | cut -f1)"
    
    # First, detect the FPGA device (reuse existing logic)
    local cmd_detect="$XC3SPROG_BIN -c $cable -p $position"
    local output_detect
    
    if ! output_detect=$(sudo $cmd_detect 2>&1); then
        log_error "Failed to detect FPGA device"
        return 1
    fi
    
    # Extract IDCODE
    local idcode
    idcode=$(echo "$output_detect" | grep -o "IDCODE: 0x[0-9a-fA-F]*" | cut -d: -f2 | tr -d ' ')
    
    if [ -z "$idcode" ]; then
        log_error "Could not detect FPGA device"
        return 1
    fi
    
    local device
    device=$(get_fpga_device "$idcode")
    log_info "Detected FPGA: $device ($idcode)"
    
    # Build flash command
    local cmd_flash="$XC3SPROG_BIN -c $cable"
    
    # Add bscan bitstream unless skipping
    if [ "$skip_bitstream" -eq 0 ]; then
        log_info "Loading bscan bitstream for SPI flash access..."
        
        # Auto-select bscan file
        local bscan_file
        if ! bscan_file=$(find_bscan_file "$device"); then
            log_error "No bscan file found for device $device"
            return 1
        fi
        
        log_info "Using bscan file: $bscan_file"
        cmd_flash="$cmd_flash -I$bscan_file"
    else
        log_info "Skipping bscan bitstream (--skipbitstream specified)"
        cmd_flash="$cmd_flash -I"
    fi
    
    # Add flash programming parameters
    cmd_flash="$cmd_flash -p $position $flash_file:w:0:BIN"
    
    if [ $VERBOSE -eq 1 ]; then
        cmd_flash="$cmd_flash -v"
    fi
    
    log_info "Flash command: $cmd_flash"
    
    # Execute flash programming
    if [ "$dry_run" -eq 1 ]; then
        log_info "DRY RUN: Would execute: sudo $cmd_flash"
        return 0
    fi
    
    log_info "Programming flash... This may take several minutes."
    log_warning "Do NOT interrupt the process or power off the device!"
    
    local start_time=$(date +%s)
    local output_flash
    
    if ! output_flash=$(sudo $cmd_flash 2>&1); then
        log_error "Flash programming failed!"
        log_error "Command output:"
        echo "$output_flash"
        return 1
    fi
    
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    # Check for success indicators in output
    if echo "$output_flash" | grep -q "Verify: Success!"; then
        log_success "Flash programming completed successfully!"
        log_info "Programming time: ${duration}s"
        
        # Extract useful statistics if available
        if echo "$output_flash" | grep -q "Maximum erase time"; then
            local erase_time=$(echo "$output_flash" | grep "Maximum erase time" | head -1)
            log_info "Flash stats: $erase_time"
        fi
        
        return 0
    else
        log_error "Flash programming may have failed - verification not found in output"
        if [ $VERBOSE -eq 1 ]; then
            log_error "Full output:"
            echo "$output_flash"
        else
            log_info "Run with --verbose for detailed output"
        fi
        return 1
    fi
}

# Main function
main() {
    local command=""
    local cable="$DEFAULT_CABLE"
    local position="$DEFAULT_POSITION"
    local bscan_file=""
    local flash_file=""
    local skip_bitstream=0
    local dry_run=0
    
    # Parse command line arguments
    while [ $# -gt 0 ]; do
        case $1 in
            --info)
                command="info"
                shift
                ;;
            --flash=*)
                command="flash"
                flash_file="${1#*=}"
                shift
                ;;
            --cable=*)
                cable="${1#*=}"
                shift
                ;;
            --position=*)
                position="${1#*=}"
                shift
                ;;
            --bscan=*)
                bscan_file="${1#*=}"
                shift
                ;;
            --skipbitstream)
                skip_bitstream=1
                shift
                ;;
            --verbose)
                VERBOSE=1
                shift
                ;;
            --dry-run)
                dry_run=1
                shift
                ;;
            --debug)
                set -x
                shift
                ;;
            --help|-h)
                show_usage
                exit 0
                ;;
            *)
                log_error "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
    
    # Validate command
    if [ -z "$command" ]; then
        log_error "No command specified"
        show_usage
        exit 1
    fi
    
    # Execute command
    case "$command" in
        "info")
            if [ $VERBOSE -eq 1 ]; then
                log_info "Calling get_info with skip_bitstream=$skip_bitstream"
            fi
            get_info "$cable" "$position" "$bscan_file" "$skip_bitstream"
            ;;
        "flash")
            if [ -z "$flash_file" ]; then
                log_error "No flash file specified with --flash=FILE"
                exit 1
            fi
            flash_bitstream "$cable" "$position" "$flash_file" "$skip_bitstream" "$dry_run"
            ;;
        *)
            log_error "Unknown command: $command"
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
